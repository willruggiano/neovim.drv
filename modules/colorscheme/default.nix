{inputs, ...}: {
  perSystem = {
    config,
    lib,
    nix-colors,
    pkgs,
    ...
  }: let
    cfg = config.neovim.colorscheme;

    mkVariant = v:
      lib.mkOption {
        type = lib.types.submodule {
          freeformType = lib.types.attrsOf lib.types.anything;
          options = {
            file = lib.mkOption {
              type = lib.types.path;
              default = "${inputs.nix-colors.inputs.base16-schemes}/${cfg.variant.${v}.slug}.yaml";
            };
            palette = lib.mkOption {
              type = lib.types.attrs;
              apply = attrs: lib.mapAttrs (_: hex: "#${hex}") attrs;
            };
          };
        };
      };
  in {
    options.neovim.colorscheme = {
      variant = {
        dark = mkVariant "dark";
        light = mkVariant "light";
      };

      final = lib.mkOption {
        type = lib.types.submodule {
          options = {
            palette = lib.mkOption {
              type = lib.types.package;
            };
          };
        };
      };
    };

    config.neovim.colorscheme = {
      variant = with nix-colors.schemes; {
        dark = tomorrow-night-eighties;
        light = tomorrow;
      };

      final = let
        inherit (cfg.variant) dark light;
      in {
        palette = pkgs.writeTextDir "lua/flavours/palette.lua" ''
          -- Generated by Nix.
          -- ${dark.name} (${dark.author})
          local dark = ${lib.generators.toLua {} dark.palette}

          -- ${light.name} (${light.author})
          local light = ${lib.generators.toLua {} light.palette}

          return {
            dark = dark,
            light = light,
          }
        '';
      };
    };
  };
}
